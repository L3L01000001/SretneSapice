// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SretneSapice.Services.Database;

#nullable disable

namespace SretneSapice.Services.Migrations
{
    [DbContext(typeof(_180148Context))]
    partial class _180148ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SretneSapice.Services.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("LikesCount")
                        .HasColumnType("int");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CommentId")
                        .HasName("PK__Comment__C3B4DFAAD757BB40");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.CommentLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LikeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LikeId")
                        .HasName("PK__CommentL__A2922CF4DED4785D");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentLike", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("CountryId");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalker", b =>
                {
                    b.Property<int>("DogWalkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DogWalkerId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<byte[]>("DogWalkerPhoto")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("DogWalkerPhotoThumb")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("isApproved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("DogWalkerId")
                        .HasName("PK__DogWalke__7AE957542C4A8B9E");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("DogWalker", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalkerAvailability", b =>
                {
                    b.Property<int>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AvailabilityStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DogWalkerId", "Date", "StartTime", "EndTime")
                        .HasName("PK__DogWalke__A9F7DEBDFB5F1C93");

                    b.ToTable("DogWalkerAvailability", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalkerLocation", b =>
                {
                    b.Property<int>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("date");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("DogWalkerId", "Timestamp")
                        .HasName("PK__DogWalke__82636EF78AE5B872");

                    b.ToTable("DogWalkerLocation", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.FavoriteWalker", b =>
                {
                    b.Property<int>("FavoriteWalkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FavoriteWalkerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteWalkerId"));

                    b.Property<int?>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FavoriteWalkerId")
                        .HasName("PK__Favorite__8F7DAA3D91565AE6");

                    b.HasIndex("DogWalkerId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteWalker", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ForumPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int?>("LikesCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PhotoThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PostId")
                        .HasName("PK__ForumPos__AA1260380DF73D3A");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPost", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ForumPostTag", b =>
                {
                    b.Property<int>("PostsPostId")
                        .HasColumnType("int")
                        .HasColumnName("PostsPostId");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int")
                        .HasColumnName("TagsTagId");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostId");

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagId");

                    b.HasKey("PostsPostId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ForumPostTag", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BAFD5DE5E5D");

                    b.HasIndex("ShippingInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderIte__57ED06A10CF4F6C4");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TransactionID");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__9B556A581D06CA63");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<byte[]>("ProductPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ProductPhotoThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6ED550AD9A5");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ProductTypeID");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductTypeId")
                        .HasName("PK_ItemType");

                    b.ToTable("ProductType", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ScheduledService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int?>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ServiceId")
                        .HasName("PK__Schedule__C51BB0EAED6F0B2E");

                    b.HasIndex("DogWalkerId");

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledService", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceRequestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DogBreed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("LiveLocationEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ServiceRequestId")
                        .HasName("PK__ServiceR__790F6CABD9E7C998");

                    b.HasIndex("DogWalkerId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequest", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId")
                        .HasName("PK__Tag__657CFA4C6B63B1A6");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ProfilePhotoThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC8120D4EF");

                    b.HasIndex("CityId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime?>("DateOfChange")
                        .HasColumnType("datetime");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole__3D978A552146AC3A");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.UserShippingInformation", b =>
                {
                    b.Property<int>("ShippingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingInfoId"));

                    b.Property<string>("Address")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ZIPCode");

                    b.HasKey("ShippingInfoId")
                        .HasName("PK__UserShip__A72E5D95FFE96546");

                    b.HasIndex("UserId");

                    b.ToTable("UserShippingInformation", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.WalkerReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("DogWalkerId")
                        .HasColumnType("int")
                        .HasColumnName("DogWalkerID");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__WalkerRe__74BC79AE43C20541");

                    b.HasIndex("DogWalkerId");

                    b.HasIndex("UserId");

                    b.ToTable("WalkerReview", (string)null);
                });

            modelBuilder.Entity("SretneSapice.Services.Database.City", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_City_City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Comment", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.ForumPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__Comment__PostID__43D61337");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comment__UserID__44CA3770");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.CommentLike", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.Comment", "Comment")
                        .WithMany("CommentLikes")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK__CommentLi__Comme__489AC854");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__CommentLi__UserI__498EEC8D");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalker", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.City", "City")
                        .WithMany("DogWalkers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__DogWalker__CityI__4D5F7D71");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("DogWalkers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__DogWalker__UserI__4C6B5938");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalkerAvailability", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.DogWalker", "DogWalker")
                        .WithMany("DogWalkerAvailabilities")
                        .HasForeignKey("DogWalkerId")
                        .IsRequired()
                        .HasConstraintName("FK__DogWalker__DogWa__503BEA1C");

                    b.Navigation("DogWalker");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalkerLocation", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.DogWalker", "DogWalker")
                        .WithMany("DogWalkerLocations")
                        .HasForeignKey("DogWalkerId")
                        .IsRequired()
                        .HasConstraintName("FK__DogWalker__DogWa__531856C7");

                    b.Navigation("DogWalker");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.FavoriteWalker", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.DogWalker", "DogWalker")
                        .WithMany("FavoriteWalkers")
                        .HasForeignKey("DogWalkerId")
                        .HasConstraintName("FK__FavoriteW__DogWa__56E8E7AB");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("FavoriteWalkers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__FavoriteW__UserI__55F4C372");

                    b.Navigation("DogWalker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ForumPost", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("ForumPosts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ForumPost__UserI__40058253");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ForumPostTag", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.ForumPost", "ForumPost")
                        .WithMany("ForumPostTags")
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SretneSapice.Services.Database.Tag", "Tag")
                        .WithMany("ForumPostTags")
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForumPost");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Order", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.UserShippingInformation", "ShippingInfo")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK__Order__ShippingI__5AB9788F");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Order__UserID__59C55456");

                    b.Navigation("ShippingInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.OrderItem", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderItem__Order__5D95E53A");

                    b.HasOne("SretneSapice.Services.Database.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__OrderItem__Produ__5E8A0973");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Payment", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Payment__OrderID__6166761E");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Product", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .HasConstraintName("FK__Product__Product__3864608B");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ScheduledService", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.DogWalker", "DogWalker")
                        .WithMany("ScheduledServices")
                        .HasForeignKey("DogWalkerId")
                        .HasConstraintName("FK__Scheduled__DogWa__69FBBC1F");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("ScheduledServices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Scheduled__UserI__6AEFE058");

                    b.Navigation("DogWalker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ServiceRequest", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.DogWalker", "DogWalker")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("DogWalkerId")
                        .HasConstraintName("FK__ServiceRe__DogWa__6DCC4D03");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__ServiceRe__UserI__6EC0713C");

                    b.Navigation("DogWalker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.User", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__User__CityID__2DE6D218");

                    b.Navigation("City");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.UserRole", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__UserRole__RoleID__31B762FC");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserRole__UserID__30C33EC3");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.UserShippingInformation", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("UserShippingInformations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserShipp__UserI__3493CFA7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.WalkerReview", b =>
                {
                    b.HasOne("SretneSapice.Services.Database.DogWalker", "DogWalker")
                        .WithMany("WalkerReviews")
                        .HasForeignKey("DogWalkerId")
                        .HasConstraintName("FK__WalkerRev__DogWa__719CDDE7");

                    b.HasOne("SretneSapice.Services.Database.User", "User")
                        .WithMany("WalkerReviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__WalkerRev__UserI__72910220");

                    b.Navigation("DogWalker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.City", b =>
                {
                    b.Navigation("DogWalkers");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Comment", b =>
                {
                    b.Navigation("CommentLikes");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.DogWalker", b =>
                {
                    b.Navigation("DogWalkerAvailabilities");

                    b.Navigation("DogWalkerLocations");

                    b.Navigation("FavoriteWalkers");

                    b.Navigation("ScheduledServices");

                    b.Navigation("ServiceRequests");

                    b.Navigation("WalkerReviews");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ForumPost", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ForumPostTags");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.Tag", b =>
                {
                    b.Navigation("ForumPostTags");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.User", b =>
                {
                    b.Navigation("CommentLikes");

                    b.Navigation("Comments");

                    b.Navigation("DogWalkers");

                    b.Navigation("FavoriteWalkers");

                    b.Navigation("ForumPosts");

                    b.Navigation("Orders");

                    b.Navigation("ScheduledServices");

                    b.Navigation("ServiceRequests");

                    b.Navigation("UserRoles");

                    b.Navigation("UserShippingInformations");

                    b.Navigation("WalkerReviews");
                });

            modelBuilder.Entity("SretneSapice.Services.Database.UserShippingInformation", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
